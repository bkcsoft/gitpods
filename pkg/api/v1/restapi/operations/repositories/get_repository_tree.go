// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRepositoryTreeHandlerFunc turns a function with the right signature into a get repository tree handler
type GetRepositoryTreeHandlerFunc func(GetRepositoryTreeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRepositoryTreeHandlerFunc) Handle(params GetRepositoryTreeParams) middleware.Responder {
	return fn(params)
}

// GetRepositoryTreeHandler interface for that can handle valid get repository tree params
type GetRepositoryTreeHandler interface {
	Handle(GetRepositoryTreeParams) middleware.Responder
}

// NewGetRepositoryTree creates a new http.Handler for the get repository tree operation
func NewGetRepositoryTree(ctx *middleware.Context, handler GetRepositoryTreeHandler) *GetRepositoryTree {
	return &GetRepositoryTree{Context: ctx, Handler: handler}
}

/*GetRepositoryTree swagger:route GET /repositories/{owner}/{name}/tree repositories getRepositoryTree

Get the tree including folders (tree) and files (blob) for a repository

*/
type GetRepositoryTree struct {
	Context *middleware.Context
	Handler GetRepositoryTreeHandler
}

func (o *GetRepositoryTree) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRepositoryTreeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
