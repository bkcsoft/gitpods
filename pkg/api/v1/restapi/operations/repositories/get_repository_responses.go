// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sourcepods/sourcepods/pkg/api/v1/models"
)

// GetRepositoryOKCode is the HTTP code returned for type GetRepositoryOK
const GetRepositoryOKCode int = 200

/*GetRepositoryOK The repository found by its owner and name

swagger:response getRepositoryOK
*/
type GetRepositoryOK struct {

	/*
	  In: Body
	*/
	Payload *models.Repository `json:"body,omitempty"`
}

// NewGetRepositoryOK creates GetRepositoryOK with default headers values
func NewGetRepositoryOK() *GetRepositoryOK {

	return &GetRepositoryOK{}
}

// WithPayload adds the payload to the get repository o k response
func (o *GetRepositoryOK) WithPayload(payload *models.Repository) *GetRepositoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository o k response
func (o *GetRepositoryOK) SetPayload(payload *models.Repository) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRepositoryNotFoundCode is the HTTP code returned for type GetRepositoryNotFound
const GetRepositoryNotFoundCode int = 404

/*GetRepositoryNotFound The owner and name combination could not be found

swagger:response getRepositoryNotFound
*/
type GetRepositoryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryNotFound creates GetRepositoryNotFound with default headers values
func NewGetRepositoryNotFound() *GetRepositoryNotFound {

	return &GetRepositoryNotFound{}
}

// WithPayload adds the payload to the get repository not found response
func (o *GetRepositoryNotFound) WithPayload(payload *models.Error) *GetRepositoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository not found response
func (o *GetRepositoryNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryDefault unexpected error

swagger:response getRepositoryDefault
*/
type GetRepositoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryDefault creates GetRepositoryDefault with default headers values
func NewGetRepositoryDefault(code int) *GetRepositoryDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository default response
func (o *GetRepositoryDefault) WithStatusCode(code int) *GetRepositoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository default response
func (o *GetRepositoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository default response
func (o *GetRepositoryDefault) WithPayload(payload *models.Error) *GetRepositoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository default response
func (o *GetRepositoryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
