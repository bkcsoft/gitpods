// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sourcepods/sourcepods/pkg/api/v1/models"
)

// GetRepositoryBranchesOKCode is the HTTP code returned for type GetRepositoryBranchesOK
const GetRepositoryBranchesOKCode int = 200

/*GetRepositoryBranchesOK The repository's branches

swagger:response getRepositoryBranchesOK
*/
type GetRepositoryBranchesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Branch `json:"body,omitempty"`
}

// NewGetRepositoryBranchesOK creates GetRepositoryBranchesOK with default headers values
func NewGetRepositoryBranchesOK() *GetRepositoryBranchesOK {

	return &GetRepositoryBranchesOK{}
}

// WithPayload adds the payload to the get repository branches o k response
func (o *GetRepositoryBranchesOK) WithPayload(payload []*models.Branch) *GetRepositoryBranchesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository branches o k response
func (o *GetRepositoryBranchesOK) SetPayload(payload []*models.Branch) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryBranchesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Branch, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetRepositoryBranchesNotFoundCode is the HTTP code returned for type GetRepositoryBranchesNotFound
const GetRepositoryBranchesNotFoundCode int = 404

/*GetRepositoryBranchesNotFound The owner and name combination could not be found

swagger:response getRepositoryBranchesNotFound
*/
type GetRepositoryBranchesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryBranchesNotFound creates GetRepositoryBranchesNotFound with default headers values
func NewGetRepositoryBranchesNotFound() *GetRepositoryBranchesNotFound {

	return &GetRepositoryBranchesNotFound{}
}

// WithPayload adds the payload to the get repository branches not found response
func (o *GetRepositoryBranchesNotFound) WithPayload(payload *models.Error) *GetRepositoryBranchesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository branches not found response
func (o *GetRepositoryBranchesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryBranchesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryBranchesDefault unexpected error

swagger:response getRepositoryBranchesDefault
*/
type GetRepositoryBranchesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryBranchesDefault creates GetRepositoryBranchesDefault with default headers values
func NewGetRepositoryBranchesDefault(code int) *GetRepositoryBranchesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryBranchesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository branches default response
func (o *GetRepositoryBranchesDefault) WithStatusCode(code int) *GetRepositoryBranchesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository branches default response
func (o *GetRepositoryBranchesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository branches default response
func (o *GetRepositoryBranchesDefault) WithPayload(payload *models.Error) *GetRepositoryBranchesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository branches default response
func (o *GetRepositoryBranchesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryBranchesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
