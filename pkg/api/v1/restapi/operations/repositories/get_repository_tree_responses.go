// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sourcepods/sourcepods/pkg/api/v1/models"
)

// GetRepositoryTreeOKCode is the HTTP code returned for type GetRepositoryTreeOK
const GetRepositoryTreeOKCode int = 200

/*GetRepositoryTreeOK The repository's tree

swagger:response getRepositoryTreeOK
*/
type GetRepositoryTreeOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TreeEntry `json:"body,omitempty"`
}

// NewGetRepositoryTreeOK creates GetRepositoryTreeOK with default headers values
func NewGetRepositoryTreeOK() *GetRepositoryTreeOK {

	return &GetRepositoryTreeOK{}
}

// WithPayload adds the payload to the get repository tree o k response
func (o *GetRepositoryTreeOK) WithPayload(payload []*models.TreeEntry) *GetRepositoryTreeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository tree o k response
func (o *GetRepositoryTreeOK) SetPayload(payload []*models.TreeEntry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryTreeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.TreeEntry, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetRepositoryTreeNotFoundCode is the HTTP code returned for type GetRepositoryTreeNotFound
const GetRepositoryTreeNotFoundCode int = 404

/*GetRepositoryTreeNotFound The owner and name combination could not be found

swagger:response getRepositoryTreeNotFound
*/
type GetRepositoryTreeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryTreeNotFound creates GetRepositoryTreeNotFound with default headers values
func NewGetRepositoryTreeNotFound() *GetRepositoryTreeNotFound {

	return &GetRepositoryTreeNotFound{}
}

// WithPayload adds the payload to the get repository tree not found response
func (o *GetRepositoryTreeNotFound) WithPayload(payload *models.Error) *GetRepositoryTreeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository tree not found response
func (o *GetRepositoryTreeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryTreeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryTreeDefault unexpected error

swagger:response getRepositoryTreeDefault
*/
type GetRepositoryTreeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryTreeDefault creates GetRepositoryTreeDefault with default headers values
func NewGetRepositoryTreeDefault(code int) *GetRepositoryTreeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryTreeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository tree default response
func (o *GetRepositoryTreeDefault) WithStatusCode(code int) *GetRepositoryTreeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository tree default response
func (o *GetRepositoryTreeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository tree default response
func (o *GetRepositoryTreeDefault) WithPayload(payload *models.Error) *GetRepositoryTreeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository tree default response
func (o *GetRepositoryTreeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryTreeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
