// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/storage/storage.proto

package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (dst *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(dst, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetDescriptionRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDescriptionRequest) Reset()         { *m = SetDescriptionRequest{} }
func (m *SetDescriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SetDescriptionRequest) ProtoMessage()    {}
func (*SetDescriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{1}
}
func (m *SetDescriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDescriptionRequest.Unmarshal(m, b)
}
func (m *SetDescriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDescriptionRequest.Marshal(b, m, deterministic)
}
func (dst *SetDescriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDescriptionRequest.Merge(dst, src)
}
func (m *SetDescriptionRequest) XXX_Size() int {
	return xxx_messageInfo_SetDescriptionRequest.Size(m)
}
func (m *SetDescriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDescriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDescriptionRequest proto.InternalMessageInfo

func (m *SetDescriptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetDescriptionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BranchesRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BranchesRequest) Reset()         { *m = BranchesRequest{} }
func (m *BranchesRequest) String() string { return proto.CompactTextString(m) }
func (*BranchesRequest) ProtoMessage()    {}
func (*BranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{2}
}
func (m *BranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BranchesRequest.Unmarshal(m, b)
}
func (m *BranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BranchesRequest.Marshal(b, m, deterministic)
}
func (dst *BranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchesRequest.Merge(dst, src)
}
func (m *BranchesRequest) XXX_Size() int {
	return xxx_messageInfo_BranchesRequest.Size(m)
}
func (m *BranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BranchesRequest proto.InternalMessageInfo

func (m *BranchesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BranchResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sha1                 string   `protobuf:"bytes,2,opt,name=sha1,proto3" json:"sha1,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BranchResponse) Reset()         { *m = BranchResponse{} }
func (m *BranchResponse) String() string { return proto.CompactTextString(m) }
func (*BranchResponse) ProtoMessage()    {}
func (*BranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{3}
}
func (m *BranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BranchResponse.Unmarshal(m, b)
}
func (m *BranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BranchResponse.Marshal(b, m, deterministic)
}
func (dst *BranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchResponse.Merge(dst, src)
}
func (m *BranchResponse) XXX_Size() int {
	return xxx_messageInfo_BranchResponse.Size(m)
}
func (m *BranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BranchResponse proto.InternalMessageInfo

func (m *BranchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BranchResponse) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *BranchResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type BranchesResponse struct {
	Branch               []*BranchResponse `protobuf:"bytes,1,rep,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BranchesResponse) Reset()         { *m = BranchesResponse{} }
func (m *BranchesResponse) String() string { return proto.CompactTextString(m) }
func (*BranchesResponse) ProtoMessage()    {}
func (*BranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{4}
}
func (m *BranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BranchesResponse.Unmarshal(m, b)
}
func (m *BranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BranchesResponse.Marshal(b, m, deterministic)
}
func (dst *BranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchesResponse.Merge(dst, src)
}
func (m *BranchesResponse) XXX_Size() int {
	return xxx_messageInfo_BranchesResponse.Size(m)
}
func (m *BranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BranchesResponse proto.InternalMessageInfo

func (m *BranchesResponse) GetBranch() []*BranchResponse {
	if m != nil {
		return m.Branch
	}
	return nil
}

type CommitRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ref                  string   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{5}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (dst *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(dst, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CommitRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

type CommitResponse struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tree                 string   `protobuf:"bytes,2,opt,name=Tree,proto3" json:"Tree,omitempty"`
	Parent               string   `protobuf:"bytes,3,opt,name=Parent,proto3" json:"Parent,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	Author               string   `protobuf:"bytes,5,opt,name=Author,proto3" json:"Author,omitempty"`
	AuthorEmail          string   `protobuf:"bytes,6,opt,name=AuthorEmail,proto3" json:"AuthorEmail,omitempty"`
	AuthorDate           int64    `protobuf:"varint,7,opt,name=AuthorDate,proto3" json:"AuthorDate,omitempty"`
	Committer            string   `protobuf:"bytes,8,opt,name=Committer,proto3" json:"Committer,omitempty"`
	CommitterEmail       string   `protobuf:"bytes,9,opt,name=CommitterEmail,proto3" json:"CommitterEmail,omitempty"`
	CommitterDate        int64    `protobuf:"varint,10,opt,name=CommitterDate,proto3" json:"CommitterDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{6}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (dst *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(dst, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CommitResponse) GetTree() string {
	if m != nil {
		return m.Tree
	}
	return ""
}

func (m *CommitResponse) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CommitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommitResponse) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *CommitResponse) GetAuthorEmail() string {
	if m != nil {
		return m.AuthorEmail
	}
	return ""
}

func (m *CommitResponse) GetAuthorDate() int64 {
	if m != nil {
		return m.AuthorDate
	}
	return 0
}

func (m *CommitResponse) GetCommitter() string {
	if m != nil {
		return m.Committer
	}
	return ""
}

func (m *CommitResponse) GetCommitterEmail() string {
	if m != nil {
		return m.CommitterEmail
	}
	return ""
}

func (m *CommitResponse) GetCommitterDate() int64 {
	if m != nil {
		return m.CommitterDate
	}
	return 0
}

type TreeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ref                  string   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeRequest) Reset()         { *m = TreeRequest{} }
func (m *TreeRequest) String() string { return proto.CompactTextString(m) }
func (*TreeRequest) ProtoMessage()    {}
func (*TreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{7}
}
func (m *TreeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeRequest.Unmarshal(m, b)
}
func (m *TreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeRequest.Marshal(b, m, deterministic)
}
func (dst *TreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeRequest.Merge(dst, src)
}
func (m *TreeRequest) XXX_Size() int {
	return xxx_messageInfo_TreeRequest.Size(m)
}
func (m *TreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TreeRequest proto.InternalMessageInfo

func (m *TreeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TreeRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *TreeRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type TreeEntryResponse struct {
	Mode                 string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Object               string   `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeEntryResponse) Reset()         { *m = TreeEntryResponse{} }
func (m *TreeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*TreeEntryResponse) ProtoMessage()    {}
func (*TreeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{8}
}
func (m *TreeEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeEntryResponse.Unmarshal(m, b)
}
func (m *TreeEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeEntryResponse.Marshal(b, m, deterministic)
}
func (dst *TreeEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeEntryResponse.Merge(dst, src)
}
func (m *TreeEntryResponse) XXX_Size() int {
	return xxx_messageInfo_TreeEntryResponse.Size(m)
}
func (m *TreeEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TreeEntryResponse proto.InternalMessageInfo

func (m *TreeEntryResponse) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *TreeEntryResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TreeEntryResponse) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *TreeEntryResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type TreeResponse struct {
	TreeEntries          []*TreeEntryResponse `protobuf:"bytes,1,rep,name=treeEntries,proto3" json:"treeEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TreeResponse) Reset()         { *m = TreeResponse{} }
func (m *TreeResponse) String() string { return proto.CompactTextString(m) }
func (*TreeResponse) ProtoMessage()    {}
func (*TreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_559a0abf0432da91, []int{9}
}
func (m *TreeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeResponse.Unmarshal(m, b)
}
func (m *TreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeResponse.Marshal(b, m, deterministic)
}
func (dst *TreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeResponse.Merge(dst, src)
}
func (m *TreeResponse) XXX_Size() int {
	return xxx_messageInfo_TreeResponse.Size(m)
}
func (m *TreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TreeResponse proto.InternalMessageInfo

func (m *TreeResponse) GetTreeEntries() []*TreeEntryResponse {
	if m != nil {
		return m.TreeEntries
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "storage.CreateRequest")
	proto.RegisterType((*SetDescriptionRequest)(nil), "storage.SetDescriptionRequest")
	proto.RegisterType((*BranchesRequest)(nil), "storage.BranchesRequest")
	proto.RegisterType((*BranchResponse)(nil), "storage.BranchResponse")
	proto.RegisterType((*BranchesResponse)(nil), "storage.BranchesResponse")
	proto.RegisterType((*CommitRequest)(nil), "storage.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "storage.CommitResponse")
	proto.RegisterType((*TreeRequest)(nil), "storage.TreeRequest")
	proto.RegisterType((*TreeEntryResponse)(nil), "storage.TreeEntryResponse")
	proto.RegisterType((*TreeResponse)(nil), "storage.TreeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetDescriptions(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Tree(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
}

type repositoryClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryClient(cc *grpc.ClientConn) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Repository/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) SetDescriptions(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storage.Repository/SetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Tree(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/storage.Repository/Tree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
type RepositoryServer interface {
	Create(context.Context, *CreateRequest) (*empty.Empty, error)
	SetDescriptions(context.Context, *SetDescriptionRequest) (*empty.Empty, error)
	Tree(context.Context, *TreeRequest) (*TreeResponse, error)
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Repository/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_SetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).SetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Repository/SetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).SetDescriptions(ctx, req.(*SetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Tree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Tree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Repository/Tree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Tree(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Repository_Create_Handler,
		},
		{
			MethodName: "SetDescriptions",
			Handler:    _Repository_SetDescriptions_Handler,
		},
		{
			MethodName: "Tree",
			Handler:    _Repository_Tree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/storage/storage.proto",
}

// BranchClient is the client API for Branch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BranchClient interface {
	List(ctx context.Context, in *BranchesRequest, opts ...grpc.CallOption) (*BranchesResponse, error)
}

type branchClient struct {
	cc *grpc.ClientConn
}

func NewBranchClient(cc *grpc.ClientConn) BranchClient {
	return &branchClient{cc}
}

func (c *branchClient) List(ctx context.Context, in *BranchesRequest, opts ...grpc.CallOption) (*BranchesResponse, error) {
	out := new(BranchesResponse)
	err := c.cc.Invoke(ctx, "/storage.Branch/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchServer is the server API for Branch service.
type BranchServer interface {
	List(context.Context, *BranchesRequest) (*BranchesResponse, error)
}

func RegisterBranchServer(s *grpc.Server, srv BranchServer) {
	s.RegisterService(&_Branch_serviceDesc, srv)
}

func _Branch_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Branch/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).List(ctx, req.(*BranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Branch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Branch",
	HandlerType: (*BranchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Branch_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/storage/storage.proto",
}

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitClient interface {
	Get(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type commitClient struct {
	cc *grpc.ClientConn
}

func NewCommitClient(cc *grpc.ClientConn) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) Get(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/storage.Commit/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
type CommitServer interface {
	Get(context.Context, *CommitRequest) (*CommitResponse, error)
}

func RegisterCommitServer(s *grpc.Server, srv CommitServer) {
	s.RegisterService(&_Commit_serviceDesc, srv)
}

func _Commit_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Commit/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Get(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Commit_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/storage/storage.proto",
}

func init() { proto.RegisterFile("pkg/storage/storage.proto", fileDescriptor_storage_559a0abf0432da91) }

var fileDescriptor_storage_559a0abf0432da91 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x55, 0x7e, 0x3e, 0xf7, 0xeb, 0x84, 0xa6, 0x65, 0x45, 0xd3, 0x6d, 0x40, 0x25, 0x58, 0x08,
	0xe5, 0x2a, 0x51, 0x53, 0x09, 0x21, 0xc1, 0x05, 0x90, 0x46, 0x50, 0x29, 0x48, 0xc8, 0xf0, 0x02,
	0x9b, 0x64, 0xea, 0x18, 0x6a, 0xaf, 0xd9, 0x9d, 0x5c, 0xe4, 0xad, 0x78, 0x0a, 0x9e, 0x0b, 0xad,
	0x77, 0xd7, 0x71, 0xd2, 0x46, 0xe2, 0xca, 0x33, 0xc7, 0xb3, 0x73, 0xf6, 0xcc, 0xce, 0x81, 0xf3,
	0xfc, 0x67, 0x3c, 0xd4, 0x24, 0x95, 0x88, 0xd1, 0x7f, 0x07, 0xb9, 0x92, 0x24, 0xd9, 0x81, 0x4b,
	0xbb, 0x4f, 0x63, 0x29, 0xe3, 0x3b, 0x1c, 0x16, 0xf0, 0x6c, 0x75, 0x3b, 0xc4, 0x34, 0xa7, 0xb5,
	0xad, 0x0a, 0x9f, 0xc3, 0xd1, 0x58, 0xa1, 0x20, 0x8c, 0xf0, 0xd7, 0x0a, 0x35, 0xb1, 0x36, 0xd4,
	0x93, 0x05, 0xaf, 0xf5, 0x6a, 0xfd, 0xc3, 0xa8, 0x9e, 0x2c, 0xc2, 0x1b, 0x38, 0xfd, 0x86, 0x74,
	0x8d, 0x7a, 0xae, 0x92, 0x9c, 0x12, 0x99, 0xed, 0x29, 0x64, 0x3d, 0x68, 0x2d, 0x36, 0x55, 0xbc,
	0x5e, 0xfc, 0xa8, 0x42, 0xe1, 0x0b, 0x38, 0xfe, 0xa8, 0x44, 0x36, 0x5f, 0xa2, 0xde, 0xc7, 0x36,
	0x85, 0xb6, 0x2d, 0x89, 0x50, 0xe7, 0x32, 0xd3, 0xc8, 0x18, 0x34, 0x33, 0x91, 0xa2, 0xab, 0x29,
	0x62, 0x83, 0xe9, 0xa5, 0xb8, 0x74, 0x1c, 0x45, 0x6c, 0x30, 0x5a, 0xe7, 0xc8, 0x1b, 0x16, 0x33,
	0x71, 0x38, 0x86, 0x93, 0x0d, 0xa1, 0xeb, 0x37, 0x84, 0x60, 0x56, 0x60, 0xbc, 0xd6, 0x6b, 0xf4,
	0x5b, 0xa3, 0xb3, 0x81, 0x1f, 0xdb, 0x36, 0x71, 0xe4, 0xca, 0xc2, 0x4b, 0x38, 0x1a, 0xcb, 0x34,
	0x4d, 0x68, 0x9f, 0xf0, 0x13, 0x68, 0x28, 0xbc, 0x75, 0x97, 0x31, 0x61, 0xf8, 0xbb, 0x0e, 0x6d,
	0x7f, 0x66, 0x23, 0xe3, 0xb3, 0xd0, 0x4b, 0x2f, 0xc3, 0xc4, 0x06, 0xfb, 0xae, 0x10, 0xbd, 0x0c,
	0x13, 0xb3, 0x0e, 0x04, 0x5f, 0x85, 0xc2, 0x8c, 0x9c, 0x10, 0x97, 0x31, 0x0e, 0x07, 0x5f, 0x50,
	0x6b, 0x11, 0x23, 0x6f, 0x16, 0x3f, 0x7c, 0x6a, 0x4e, 0x7c, 0x58, 0xd1, 0x52, 0x2a, 0xfe, 0x9f,
	0x3d, 0x61, 0x33, 0xf3, 0x1e, 0x36, 0x9a, 0xa4, 0x22, 0xb9, 0xe3, 0x81, 0x7d, 0x8f, 0x0a, 0xc4,
	0x2e, 0x00, 0x6c, 0x7a, 0x2d, 0x08, 0xf9, 0x41, 0xaf, 0xd6, 0x6f, 0x44, 0x15, 0x84, 0x3d, 0x83,
	0x43, 0xab, 0x82, 0x50, 0xf1, 0xff, 0x8b, 0xf3, 0x1b, 0x80, 0xbd, 0xf2, 0x1a, 0x09, 0x1d, 0xc5,
	0x61, 0x51, 0xb2, 0x83, 0xb2, 0x97, 0x7e, 0x7e, 0x84, 0x96, 0x08, 0x0a, 0xa2, 0x6d, 0x30, 0x1c,
	0x43, 0xcb, 0xe8, 0xff, 0xe7, 0x19, 0x9b, 0xe1, 0xe5, 0x82, 0x96, 0xfe, 0xbd, 0x4d, 0x1c, 0xc6,
	0xf0, 0xd8, 0x34, 0x99, 0x64, 0xa4, 0xd6, 0xd5, 0xc9, 0xa7, 0x72, 0x51, 0x2e, 0x90, 0x89, 0xcb,
	0x65, 0xa9, 0x6f, 0x96, 0xc5, 0xcc, 0x51, 0xce, 0x7e, 0xe0, 0xbc, 0x9c, 0xbc, 0xcd, 0x4a, 0xa2,
	0x66, 0x85, 0x68, 0x0a, 0x8f, 0xec, 0x6d, 0x1d, 0xc7, 0x3b, 0x68, 0x91, 0x23, 0x4e, 0x50, 0xbb,
	0xcd, 0xea, 0x96, 0x9b, 0x75, 0xef, 0x52, 0x51, 0xb5, 0x7c, 0xf4, 0xa7, 0x06, 0x10, 0x61, 0x2e,
	0x75, 0x42, 0x52, 0xad, 0xd9, 0x1b, 0x08, 0xac, 0x25, 0x59, 0xa7, 0xec, 0xb0, 0xe5, 0xd1, 0x6e,
	0x67, 0x60, 0x2d, 0x3d, 0xf0, 0x96, 0x1e, 0x4c, 0x8c, 0xa5, 0xd9, 0x0d, 0x1c, 0x6f, 0x7b, 0x55,
	0xb3, 0x8b, 0xb2, 0xc5, 0x83, 0x2e, 0xde, 0xdb, 0xea, 0xca, 0xee, 0x26, 0x7b, 0xb2, 0x25, 0xc2,
	0x9f, 0x3a, 0xdd, 0x41, 0xad, 0xaa, 0xd1, 0x04, 0x02, 0x6b, 0x22, 0xf6, 0x16, 0x9a, 0xd3, 0x44,
	0x13, 0xe3, 0x3b, 0xee, 0x2a, 0x9d, 0xdf, 0x3d, 0x7f, 0xe0, 0x8f, 0x6b, 0xf3, 0x1e, 0x02, 0xbb,
	0x1c, 0xec, 0x35, 0x34, 0x3e, 0x21, 0x55, 0xe7, 0x50, 0x75, 0x62, 0xf7, 0xec, 0x1e, 0x6e, 0x3b,
	0xcc, 0x82, 0x42, 0xcd, 0xd5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xf7, 0x0d, 0xb0, 0x1f,
	0x05, 0x00, 0x00,
}
